{
  "version": 3,
  "sources": ["../../home/neri/code/centauri-admin/node_modules/is-promise/index.js", "../../home/neri/code/centauri-admin/node_modules/@netlify/functions/src/lib/consts.js", "../../home/neri/code/centauri-admin/node_modules/@netlify/functions/src/lib/builder.js", "../../home/neri/code/centauri-admin/node_modules/@netlify/functions/src/main.js", "../../home/neri/code/centauri-admin/src/functions/test.ts"],
  "sourceRoot": "/tmp/tmp-3166-QQEAP8sLA5qh",
  "sourcesContent": ["module.exports = isPromise;\nmodule.exports.default = isPromise;\n\nfunction isPromise(obj) {\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n}\n", "const BUILDER_FUNCTIONS_FLAG = true\nconst HTTP_STATUS_METHOD_NOT_ALLOWED = 405\nconst HTTP_STATUS_OK = 200\nconst METADATA_VERSION = 1\n\nmodule.exports = {\n  BUILDER_FUNCTIONS_FLAG,\n  HTTP_STATUS_METHOD_NOT_ALLOWED,\n  HTTP_STATUS_OK,\n  METADATA_VERSION,\n}\n", "const isPromise = require('is-promise')\n\nconst { BUILDER_FUNCTIONS_FLAG, HTTP_STATUS_METHOD_NOT_ALLOWED, HTTP_STATUS_OK, METADATA_VERSION } = require('./consts')\n\nconst augmentResponse = (response) => {\n  if (!response || response.statusCode !== HTTP_STATUS_OK) {\n    return response\n  }\n\n  return {\n    ...response,\n    metadata: { version: METADATA_VERSION, builder_function: BUILDER_FUNCTIONS_FLAG },\n  }\n}\n\n// eslint-disable-next-line promise/prefer-await-to-callbacks\nconst wrapHandler = (handler) => (event, context, callback) => {\n  if (event.httpMethod !== 'GET' && event.httpMethod !== 'HEAD') {\n    return Promise.resolve({\n      body: 'Method Not Allowed',\n      statusCode: HTTP_STATUS_METHOD_NOT_ALLOWED,\n    })\n  }\n\n  // Removing query string parameters from the builder function.\n  const modifiedEvent = {\n    ...event,\n    multiValueQueryStringParameters: {},\n    queryStringParameters: {},\n  }\n\n  // eslint-disable-next-line promise/prefer-await-to-callbacks\n  const wrappedCallback = (error, response) => callback(error, augmentResponse(response))\n  const execution = handler(modifiedEvent, context, wrappedCallback)\n\n  if (isPromise(execution)) {\n    // eslint-disable-next-line promise/prefer-await-to-then\n    return execution.then(augmentResponse)\n  }\n\n  return execution\n}\n\nmodule.exports = { builder: wrapHandler }\n", "const { builder } = require('./lib/builder')\n\nmodule.exports = { builder }\n", "import { Handler, builder } from '@netlify/functions';\n\nconst preHandler: Handler = async (event, context) => {\n  return {\n    statusCode: 200,\n    headers: {\n      'Content-Type': 'text/html',\n    },\n    body: `\n    <!DOCTYPE html>\n\t    <html>\n\t\t    <body>\n\t\t      Hello World\n\n          <pre>${JSON.stringify(event)}</pre>\n\t\t    </body>\n    </html>\n    `,\n  };\n};\n\nconst handler = builder(preHandler);\n\nexport { handler };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA,YAAO,UAAU;AACjB,YAAO,QAAQ,UAAU;AAEzB,uBAAmB,KAAK;AACtB,aAAO,CAAC,CAAC,OAAQ,QAAO,QAAQ,YAAY,OAAO,QAAQ,eAAe,OAAO,IAAI,SAAS;AAAA;AAAA;AAAA;;;ACJhG;AAAA;AAAA,QAAM,yBAAyB;AAC/B,QAAM,iCAAiC;AACvC,QAAM,iBAAiB;AACvB,QAAM,mBAAmB;AAEzB,YAAO,UAAU;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA;AAAA;AAAA;;;ACTF;AAAA;AAAA,QAAM,YAAY;AAElB,QAAM,EAAE,wBAAwB,gCAAgC,gBAAgB,qBAAqB;AAErG,QAAM,kBAAkB,CAAC,aAAa;AACpC,UAAI,CAAC,YAAY,SAAS,eAAe,gBAAgB;AACvD,eAAO;AAAA;AAGT,aAAO,iCACF,WADE;AAAA,QAEL,UAAU,EAAE,SAAS,kBAAkB,kBAAkB;AAAA;AAAA;AAK7D,QAAM,cAAc,CAAC,aAAY,CAAC,OAAO,SAAS,aAAa;AAC7D,UAAI,MAAM,eAAe,SAAS,MAAM,eAAe,QAAQ;AAC7D,eAAO,QAAQ,QAAQ;AAAA,UACrB,MAAM;AAAA,UACN,YAAY;AAAA;AAAA;AAKhB,YAAM,gBAAgB,iCACjB,QADiB;AAAA,QAEpB,iCAAiC;AAAA,QACjC,uBAAuB;AAAA;AAIzB,YAAM,kBAAkB,CAAC,OAAO,aAAa,SAAS,OAAO,gBAAgB;AAC7E,YAAM,YAAY,SAAQ,eAAe,SAAS;AAElD,UAAI,UAAU,YAAY;AAExB,eAAO,UAAU,KAAK;AAAA;AAGxB,aAAO;AAAA;AAGT,YAAO,UAAU,EAAE,SAAS;AAAA;AAAA;;;AC3C5B;AAAA;AAAA,QAAM,EAAE,sBAAY;AAEpB,YAAO,UAAU,EAAE;AAAA;AAAA;;;ACFnB;AAAA;AAAA;AAAA,uBAAiC;AAEjC,IAAM,aAAsB,OAAO,OAAO,YAAY;AACpD,SAAO;AAAA,IACL,YAAY;AAAA,IACZ,SAAS;AAAA,MACP,gBAAgB;AAAA;AAAA,IAElB,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAMO,KAAK,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAOhC,IAAM,UAAU,8BAAQ;",
  "names": []
}
